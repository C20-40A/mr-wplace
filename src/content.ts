import { injectFetchInterceptor } from "./features/fetch-interceptor";
import { I18nManager } from "./i18n/manager";
import { detectBrowserLanguage } from "./i18n/index";
import { Toast } from "./components/toast";
import { ExtendedBookmarks } from "./features/bookmark";
import { TileOverlay } from "./features/tile-overlay";
import { Gallery } from "./features/gallery";
import { Drawing } from "./features/drawing";
import { TileSnapshot } from "./features/time-travel/utils/tile-snapshot";
import { TimeTravel } from "./features/time-travel";
import { DrawingLoader } from "./features/drawing-loader";
import { ColorFilter } from "./features/color-filter";
import { ColorFilterManager } from "./utils/color-filter-manager";
import { NextLevelBadge } from "./features/next-level-badge";
import { WPlaceUserData } from "./types/user-data";
import { TimeTravelStorage } from "./features/time-travel/storage";

const runmrWplace = async (): Promise<void> => {
  // ChromeÊã°ÂºµÊ©üËÉΩ„ÅÆ„Çπ„Éà„É¨„Éº„Ç∏API„ÅåÂà©Áî®ÂèØËÉΩ„ÅãÁ¢∫Ë™ç
  if (typeof chrome === "undefined" || !chrome.storage)
    throw new Error("Chrome storage API is not available");

  // Fetch„Ç§„É≥„Çø„Éº„Çª„Éó„Çø„Éº„ÅÆÊ≥®ÂÖ•
  injectFetchInterceptor();

  // i18nÂàùÊúüÂåñÔºà„Éñ„É©„Ç¶„Ç∂Ë®ÄË™ûÊ§úÂá∫Ôºâ
  await I18nManager.init(detectBrowserLanguage());

  const favorites = new ExtendedBookmarks();
  const tileOverlay = new TileOverlay();
  await (tileOverlay as any).init(); // ÊòéÁ§∫ÁöÑÂàùÊúüÂåñ
  const gallery = new Gallery();
  const drawing = new Drawing();
  const tileSnapshot = new TileSnapshot();
  const timeTravel = new TimeTravel();
  const drawingLoader = new DrawingLoader();
  const colorFilter = new ColorFilter();
  const colorFilterManager = new ColorFilterManager();
  const nextLevelBadge = new NextLevelBadge();

  // ColorFilterManagerÂàùÊúüÂåñÂÆå‰∫Ü„ÇíÂæÖ„Å§
  await colorFilterManager.init();

  // NextLevelBadgeÂàùÊúüÂåñ
  nextLevelBadge.init();

  // Gallery„Å®TileOverlay„ÅÆÈÄ£Êê∫Ë®≠ÂÆö
  gallery.setDrawToggleCallback(async (imageKey: string) => {
    return await tileOverlay.toggleImageDrawState(imageKey);
  });

  // Global access for ImageProcessor and Gallery
  window.mrWplace = {
    gallery,
    tileOverlay,
    favorites,
    drawing,
    tileSnapshot,
    timeTravel,
    drawingLoader,
    colorFilter,
    nextLevelBadge,
  };

  // ColorFilterManager Áõ¥Êé•ÁôªÈå≤ÔºàTemplateManager„Åã„Çâ„Ç¢„ÇØ„Çª„ÇπÁî®Ôºâ
  window.colorFilterManager = colorFilterManager;

  // Listen for snapshot tmp save messages from inject.js
  window.addEventListener("message", async (event) => {
    if (event.data.source === "wplace-studio-snapshot-tmp") {
      const { tileBlob, tileX, tileY } = event.data;
      await tileSnapshot.saveTmpTile(tileX, tileY, tileBlob);
    }

    // Listen for user data from inject.js
    if (event.data.source === "wplace-studio-userdata") {
      console.log("üßë‚Äçüé®: Received user data:", event.data.userData);
      const userData = event.data.userData as WPlaceUserData;

      nextLevelBadge.updateFromUserData(userData);
    }
  });
};

// Ë®ÄË™ûÂàáÊõø„É°„ÉÉ„Çª„Éº„Ç∏„É™„Çπ„Éä„Éº
chrome.runtime.onMessage.addListener(async (message) => {
  if (message.type === "LOCALE_CHANGED") {
    // i18n„Éû„Éç„Éº„Ç∏„É£„Éº„ÅÆÁä∂ÊÖã„ÇíÊõ¥Êñ∞
    await I18nManager.init(message.locale);
  }
});

// ÂÆüË°å
runmrWplace().catch((error) => {
  console.error("üßë‚Äçüé®: Failed to initialize", error);
  Toast.error(`initialization error: ${error.message}`);
});
